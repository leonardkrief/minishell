// rpn_algo.c
int	rpn_isspecial(t_rpn *rpn, int i);
char	*rpn_handle_parenthesis(t_rpn *rpn);
char	*rpn_handle_operators(t_rpn *rpn);
char	*rpn_isspecialtreatment(t_rpn *rpn);
t_rpn	*generate_rpn(t_rpn *rpn, char *str);

// rpn_basics.c
void	init_rpn(t_rpn *rpn, char *to_parse);
void	free_rpn(t_rpn *rpn);
t_rpn	*rpn(t_rpn *rpn, char *str);

// rpn_pop_utils.c
char	*rpn_pop_ops(t_rpn *rpn);
char	*rpn_popending(t_rpn *rpn);
void	rpn_pop_opsdel(t_rpn *rpn);

// rpn_utils.c
t_list *ft_lstnew_rpn(void *content, int precedence);
void	ft_lstappendcopy(t_list **lst, t_list *copy);
char	*ft_match_list(char *str, t_list *lst);
int	is_a_closed_parenthesis(char *str);

// make_tree.c
t_btree	*get_tree(char *str);

